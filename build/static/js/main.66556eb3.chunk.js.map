{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","prompt","add","fontSize","Avatar","signOut","src","photo","displayName","uid","ChatHeader","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","value","disabled","onChange","e","target","preventDefault","FieldValue","serverTimestamp","type","Login","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66556eb3.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state,action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo} = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setChannelInfo} from './features/appSlice';\r\nimport './SidebarChannel.css';\r\n\r\nfunction SidebarChannel({id, channelName}){\r\n    const dispatch = useDispatch();\r\n    return(\r\n        <div className='sidebarChannel' onClick={() => dispatch(setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName,\r\n\r\n        }))}>\r\n            <h4><span className='sidebarChannel__hash'>#</span>{channelName}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state,action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const {login, logout} = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDwKtK7FtfXxFBixPolbUdVm_nzxq_NaQw\",\r\n    authDomain: \"discord-clone-9995b.firebaseapp.com\",\r\n    databaseURL: \"https://discord-clone-9995b.firebaseio.com\",\r\n    projectId: \"discord-clone-9995b\",\r\n    storageBucket: \"discord-clone-9995b.appspot.com\",\r\n    messagingSenderId: \"1051642201581\",\r\n    appId: \"1:1051642201581:web:95a9ea66318e17d83113e4\",\r\n    measurementId: \"G-WSWFM46DQV\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {auth, provider};\r\nexport default db;","import React, {useState, useEffect} from 'react';\r\nimport './Sidebar.css';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport {Avatar} from '@material-ui/core';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport {useSelector} from 'react-redux';\r\nimport {selectUser} from './features/userSlice';\r\nimport db, {auth} from './firebase';\r\n\r\n\r\nfunction Sidebar(){\r\n    const user = useSelector(selectUser); \r\n    const [channels, setChannels] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot((snapshot) => \r\n            setChannels(snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                channel: doc.data(),\r\n\r\n            }))\r\n            )\r\n        );\r\n    }, []);\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt('Enter Channel Name: ');\r\n\r\n        if(channelName){\r\n            db.collection('channels').add({\r\n                channelName: channelName,\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='sidebar'>\r\n            <div className='sidebar__top'>\r\n                <h3>Code Room</h3>\r\n                <ExpandMoreIcon/>\r\n            </div>\r\n            <div className='sidebar__channels'>\r\n                <div className='sidebar__channelsHeader'>\r\n                    <div className='sidebar__header'>\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n                    <AddIcon onClick={handleAddChannel} className='sidebar__addChannel'/>\r\n                </div>\r\n                <div className='sidebar__channelsList'>\r\n                    {channels.map(({id, channel}) => (\r\n                        <SidebarChannel key={id} id={id} channelName={channel.channelName}/>\r\n                    ))}\r\n                    \r\n                </div>\r\n            </div>\r\n            <div className='sidebar__voice'>\r\n                <SignalCellularAltIcon className='sidebar__voiceIcon' fontSize='large'/>\r\n                <div className='sidebar__voiceInfo'>\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n                <div className='sidebar__voiceIcons'>\r\n                    <InfoOutlinedIcon/>\r\n                    <CallIcon/>\r\n                </div>\r\n            </div>\r\n            <div className='sidebar__profile'>\r\n                <Avatar onClick={() => auth.signOut()} src={user.photo}/>\r\n                <div className='sidebar__profileInfo'>\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid}</p>\r\n                </div>\r\n                <div className='sidebar__profileIcons'>\r\n                    <MicIcon/>\r\n                    <HeadsetIcon/>\r\n                    <SettingsIcon/>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport './ChatHeader.css';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\n\r\nfunction ChatHeader({channelName}){\r\n    return(\r\n        <div className='chatheader'>\r\n            <div className='chatheader__left'>\r\n                <h3><span className='chatheader__hash'>#</span>{channelName}</h3>\r\n            </div>\r\n            <div className='chatheader__right'>\r\n                <NotificationsIcon/>\r\n                <EditLocationRoundedIcon/>\r\n                <PeopleAltRoundedIcon/>\r\n\r\n                <div className='chatheader__search'>\r\n                    <input placeholder = 'Search'></input>\r\n                    <SearchRoundedIcon/>\r\n                </div>\r\n                <SendRoundedIcon/>\r\n                <HelpRoundedIcon/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader;","import React from 'react';\r\nimport './Message.css';\r\nimport {Avatar} from '@material-ui/core'\r\n\r\nfunction Message({timestamp, user, message}){\r\n    return(\r\n        <div className='message'>\r\n            <Avatar src={user.photo}/>\r\n            <div className='message__info'>\r\n                <h4>{user.displayName}<span className='message__timestamp'>{new Date(timestamp?.toDate()).toUTCString()}</span></h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {useState, useEffect} from 'react';\r\nimport './Chat.css';\r\nimport ChatHeader from './ChatHeader';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport Message from './Message';\r\nimport {useSelector} from 'react-redux';\r\nimport { selectChannelId, selectChannelName} from './features/appSlice';\r\nimport {selectUser} from './features/userSlice';\r\nimport db from './firebase';\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat(){\r\n    const channelId = useSelector(selectChannelId);\r\n    const user = useSelector(selectUser);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if(channelId){\r\n            db.collection('channels').doc(channelId).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => (\r\n                setMessages(snapshot.docs.map(doc => doc.data()))\r\n            ))\r\n        }\r\n    }, [channelId]);\r\n    const sendMessage = e => {\r\n        e.preventDefault();\r\n        db.collection('channels').doc(channelId).collection('messages').add({\r\n            message: input,\r\n            user: user,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        })\r\n        setInput('');\r\n    }\r\n\r\n    return(\r\n        <div className='chat'>\r\n            <ChatHeader channelName={channelName}/>\r\n            <div className='chat__messages'>\r\n                {messages.map(message => (\r\n                    <Message \r\n                    timestamp={message.timestamp}\r\n                    message={message.message}\r\n                    user={message.user}\r\n                    \r\n                    />\r\n                ))}\r\n                \r\n            </div>\r\n            <div className='chat__input'>\r\n                <AddCircleIcon fontSize='large'/>\r\n                <form>\r\n                    <input value={input} disabled={!channelId} onChange={e => setInput(e.target.value)} placeholder={`Message #${channelName}`}></input>\r\n                    <button className='chat__inputButton' onClick={sendMessage} type='submit'>Send Message</button>\r\n                </form>\r\n                <div className='chat__inputIcons'>\r\n                    <CardGiftcardIcon fontSize='large'/>\r\n                    <GifIcon fontSize='large'/>\r\n                    <EmojiEmotionsIcon fontSize='large'/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport { auth, provider} from './firebase';\r\nimport './Login.css';\r\nimport {Button} from '@material-ui/core';\r\n\r\nfunction Login(){\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n    }\r\n    return(\r\n        <div className='login'>\r\n            <div className='login__logo'>\r\n                <img src='https://www.freepnglogos.com/uploads/discord-logo-png/discord-branding-2.png'></img>\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Login;","import React, {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport Chat from './Chat';\r\nimport {useSelector } from 'react-redux';\r\nimport { selectUser} from './features/userSlice';\r\nimport Login from './Login';\r\nimport {auth} from './firebase';\r\nimport {login, logout} from './features/userSlice';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if(authUser){\r\n        dispatch(login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName,\r\n        }))\r\n      }else{\r\n        dispatch(logout());\r\n      }\r\n    })\r\n  },[dispatch])\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n        <Sidebar />\r\n        <Chat />\r\n        </>\r\n      ): (\r\n        <Login/>\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}